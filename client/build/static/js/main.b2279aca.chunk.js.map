{"version":3,"sources":["components/Appbar/index.tsx","store/cars/reducer.ts","api/cars.ts","store/cars/sagas.ts","sagas/index.ts","store/index.ts","components/Layout/index.tsx","components/Page/index.tsx","store/cars/selectors.ts","utils/dates.ts","components/CarDialog/index.tsx","components/CarList/CarItem.tsx","components/CarList/index.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","container","display","icon","alignItems","paddingRight","Appbar","title","classes","AppBar","position","Toolbar","variant","className","Typography","carListSlice","createSlice","name","initialState","cars","loading","reducers","fetchCars","state","receiveCars","action","payload","updateCar","index","findIndex","c","id","reducer","actions","a","fetch","mode","request","json","data","fetchCarsEffect","put","root","takeLatest","type","sagaMiddleware","createSagaMiddleware","store","configureStore","devTools","middleware","getDefaultMiddleware","concat","run","rootSaga","theme","body","typography","body1","margin","background","palette","default","Layout","children","padding","spacing","Page","getCars","createSelector","getDate","date","Date","split","year","day","month","moment","toDate","formatDate","toISOString","field","marginLeft","CarDialog","car","open","onConfirm","useState","clientName","setClientName","estimatedate","currentDate","setCurrentDate","renderDate","Dialog","DialogTitle","DialogContent","TextField","size","label","value","onChange","e","target","newDate","DialogActions","Button","onClick","disabled","overlay","width","height","opacity","zIndex","pointerEvents","backgroundColor","minWidth","maxWidth","flexDirection","justifyContent","marginBottom","media","CarItem","input","dispatch","useDispatch","showDialog","setShowDialog","handleChangeStatus","updated","undefined","Card","CardActionArea","CardMedia","image","CardContent","gutterBottom","make","model","color","component","km","toLocaleString","description","CardActions","fullWidth","client","marginTop","list","flexWrap","CarList","useSelector","useEffect","Container","length","map","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2279aca.chunk.js","sourcesContent":["import { AppBar, makeStyles, Toolbar, Typography } from '@material-ui/core';\nimport React, { FC, ReactNode } from 'react';\n\ntype AppbarProps = {\n  icon: ReactNode;\n  title: string;\n};\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n  },\n  icon: {\n    display: 'flex',\n    alignItems: 'center',\n    paddingRight: 8\n  },\n})\n\nconst Appbar: FC<AppbarProps> = ({ icon, title }) => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"sticky\">\n      <Toolbar variant=\"dense\">\n        <div className={classes.container}>\n          <span className={classes.icon}>{icon}</span>\n          <Typography variant=\"h6\">{title}</Typography>\n        </div>\n      </Toolbar>\n    </AppBar>\n  )\n};\n\nexport default Appbar;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport type Car = {\n  description: string,\n  make: string,\n  model: string,\n  estimatedate?: string,\n  id: number,\n  km?: number,\n  image: string,\n  clientName?: string\n};\n\ntype initialStateType = {\n  cars: Car[];\n  loading: boolean;\n};\n\nconst initialState: initialStateType = {\n  cars: [],\n  loading: false,\n};\n\nconst carListSlice = createSlice({\n  name: 'carList',\n  initialState,\n  reducers: {\n    fetchCars: (state) => {\n      state.loading = true;\n    },\n    receiveCars: (state, action: PayloadAction<Car[]>) => {\n      state.cars = action.payload;\n      state.loading = false;\n    },\n    updateCar: (state, action: PayloadAction<Car>) => {\n      const index = state.cars.findIndex((c) => c.id === action.payload.id);\n\n      if (index >= 0) {\n        state.cars[index] = action.payload\n      }\n    },\n  }\n});\n\nexport const { reducer, actions } = carListSlice;\n","import { Car } from \"../store/cars/reducer\";\n\ntype APIResult = {\n  cars: Car[];\n}\n\nexport const fetchCars = async (): Promise<Car[]> => {\n  try {\n    const request = await fetch('/api/cars', { mode: 'no-cors'});\n    const data: APIResult = await request.json();\n    return data.cars;\n  } catch {\n    return [];\n  };\n};\n","import { put } from 'redux-saga/effects';\nimport { fetchCars } from '../../api/cars';\nimport { actions } from \"./reducer\";\n\nexport function* fetchCarsEffect() {\n  const cars = yield fetchCars();\n  yield put(actions.receiveCars(cars));\n};\n","import { takeLatest } from \"redux-saga/effects\";\nimport { actions } from \"../store/cars/reducer\";\nimport { fetchCarsEffect } from \"../store/cars/sagas\";\n\nexport default function* root() {\n  yield takeLatest(actions.fetchCars.type, fetchCarsEffect);\n};\n","import { configureStore } from \"@reduxjs/toolkit\"\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"../sagas\";\nimport { reducer } from './cars/reducer';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer,\n  devTools: true,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(sagaMiddleware),\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport type IState = ReturnType<typeof reducer>\nexport default store;\n","\nimport { makeStyles, Theme } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  \"@global\": {\n    body: {\n      ...theme.typography.body1,\n      margin: 0,\n      background: theme.palette.background.default,\n    },\n  }\n}));\n\nconst Layout: FC = ({ children }) => {\n  useStyles();\n  return <div>{children}</div>\n};\n\nexport default Layout;\n","\nimport { makeStyles, Theme } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    display: 'flex',\n    padding: theme.spacing(1),\n  },\n}))\n\nconst Page: FC = ({ children }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.container}>\n      {children}\n    </div>\n  )\n};\n\nexport default Page;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { IState } from '../index';\n\nconst store = (state: IState) => state;\nexport const getIsLoading = createSelector(store, (state) => state.loading);\nexport const getCars = createSelector(store, (state) => state.cars);\n","import moment from \"moment\";\n\nexport const getDate = (date?: string): Date => {\n  if (!date) {\n    return new Date();\n  }\n\n  const [year, day, month] = date.split('/');\n\n  if (year && day && month) {\n    return moment(`${year}-${month}-${day}`).toDate();\n  }\n  return new Date(date);\n};\n\nexport const formatDate = (date: Date) => {\n  return date.toISOString().split(\"T\")[0];\n};\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, makeStyles, TextField, Theme } from '@material-ui/core';\nimport React, { ChangeEvent, FC, useState } from 'react';\nimport { Car } from '../../store/cars/reducer';\nimport { formatDate, getDate } from '../../utils/dates';\n\nconst useStyles = makeStyles<Theme>((theme: Theme) => ({\n  field: {\n    '&:not(:first-child)': {\n      marginLeft: theme.spacing(1)\n    }\n  }\n}));\n\ntype CarDialogProps = {\n  car: Car;\n  open: boolean;\n  onConfirm: (id: number, client: string, date: Date) => void\n}\n\nconst CarDialog: FC<CarDialogProps> = ({ car, open, onConfirm }) => {\n  const classes = useStyles();\n  const [clientName, setClientName] = useState('');\n  const [currentDate, setCurrentDate] = useState<Date>(getDate(car.estimatedate));\n\n  const handleClick = () => {\n    onConfirm(car.id, clientName, currentDate);\n  };\n\n  const handleDateChange = (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    const newDate = getDate(e.target.value);\n    setCurrentDate(newDate);\n  };\n\n  const handleClientName = (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setClientName(e.target.value);\n  };\n\n  const renderDate = formatDate(currentDate);\n\n  return (\n    <Dialog open={open}>\n      <DialogTitle>Put into maintenance</DialogTitle>\n      <DialogContent>\n        <TextField\n          className={classes.field}\n          size=\"small\"\n          label=\"Client name\"\n          variant=\"outlined\"\n          value={clientName}\n          onChange={handleClientName}\n        />\n        <TextField\n          className={classes.field}\n          size=\"small\"\n          label=\"Estimated date\"\n          type=\"date\"\n          value={renderDate}\n          onChange={handleDateChange}\n          variant=\"outlined\"\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClick} disabled={!clientName}>Save</Button>\n      </DialogActions>\n    </Dialog>\n  )\n};\n\nexport default CarDialog;\n","import { Button, Card, CardActionArea, CardActions, CardContent, CardMedia, makeStyles, Theme, Typography } from '@material-ui/core';\nimport React, { FC, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions, Car } from '../../store/cars/reducer';\nimport { formatDate } from '../../utils/dates';\nimport CarDialog from '../CarDialog';\n\nconst useStyles = makeStyles<Theme, { estimatedate: string | undefined }>((theme: Theme) => ({\n  overlay: {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    opacity: '0.3',\n    zIndex: 1,\n    pointerEvents: 'none',\n    backgroundColor: ({ estimatedate }) => estimatedate ? '#a7a8af' : 'transparent',\n  },\n  root: {\n    position: 'relative',\n    minWidth: 280,\n    maxWidth: 280,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(3)\n  },\n  media: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 140,\n  },\n}));\n\nconst CarItem: FC<Car> = (car) => {\n  const dispatch = useDispatch();\n  const classes = useStyles({ estimatedate: car.estimatedate });\n  const [showDialog, setShowDialog] = useState(false);\n\n  const handleConfirm = (id: number, client: string, date: Date) => {\n    const updated = {\n      ...car,\n      clientName: client,\n      estimatedate: formatDate(date),\n    }\n\n    dispatch(actions.updateCar(updated));\n    setShowDialog(false);\n  };\n\n  const handleChangeStatus = () => {\n    if (!car.estimatedate) {\n      return setShowDialog(true);\n    }\n\n    const updated = {\n      ...car,\n      clientName: undefined,\n      estimatedate: undefined,\n    };\n    dispatch(actions.updateCar(updated));\n  };\n\n  const formatKM = (input?: number) => {\n    if (!input) {\n      return 'Unknown'\n    }\n\n    return input.toLocaleString();\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <div className={classes.overlay} />\n        <CardActionArea>\n          <CardMedia\n            className={classes.media}\n            image={car.image}\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h6\">\n              {car.make} {car.model}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              ID: {car.id}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              KM: {formatKM(car.km)}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {car.clientName && `Client: ${car.clientName}`}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              Description: {car.description}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {car.estimatedate && `Estimated date: ${car.estimatedate}`}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          {!car.estimatedate && (\n            <Button size=\"small\" color=\"primary\" fullWidth onClick={handleChangeStatus}>\n              Change status\n            </Button>\n          )}\n\n          {car.estimatedate && (\n            <Button size=\"small\" color=\"primary\" fullWidth onClick={handleChangeStatus}>\n              It's done\n            </Button>\n          )}\n        </CardActions>\n      </Card>\n      <CarDialog\n        open={showDialog}\n        onConfirm={handleConfirm}\n        car={car}\n      />\n    </>\n  )\n};\n\nexport default CarItem;\n","import { Typography, Container, makeStyles, Theme } from '@material-ui/core';\nimport React, { FC, useEffect } from 'react';\nimport { getCars } from '../../store/cars/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions } from '../../store/cars/reducer';\nimport CarItem from './CarItem';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  title: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  list: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  }\n}));\n\nconst CarList: FC = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const cars = useSelector(getCars);\n\n  useEffect(() => {\n    dispatch(actions.fetchCars());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Typography variant=\"h5\" className={classes.title}>Car list ({cars.length})</Typography>\n      <div className={classes.list}>\n        {cars.map((c) => (\n          <CarItem key={c.id} {...c} />\n        ))}\n      </div>\n    </Container>\n  )\n};\n\nexport default CarList;\n","import React, { FC } from 'react';\nimport { Provider } from 'react-redux';\nimport Appbar from './components/Appbar';\nimport store from './store';\nimport AppIcon from '@material-ui/icons/DriveEta';\nimport Layout from './components/Layout';\nimport Page from './components/Page';\nimport CarList from './components/CarList';\n\nconst App: FC = () => (\n  <Provider store={store}>\n    <Layout>\n      <Appbar icon={<AppIcon />} title=\"Cars\" />\n      <Page>\n        <CarList />\n      </Page>\n    </Layout>\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}